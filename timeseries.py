# -*- coding: utf-8 -*-
"""TimeSeries

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YxT9RibhiwCMhIine92KVoEpQH70UEgB
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

df = pd.read_csv('/content/drive/MyDrive/DailyDelhiClimate.csv')
df.head()

jumlah_data = df['date'].count()
jumlah_data

from sklearn.model_selection import train_test_split
dates = df['date'].values
temp  = df['meantemp'].values
x_train, x_test, y_train, y_test= train_test_split(dates, temp, test_size=0.2)

plt.figure(figsize=(15,5))
plt.plot(dates, temp)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(temp, window_size=60, batch_size=100, shuffle_buffer=1000)
val_test = windowed_dataset(y_test, window_size = 60, batch_size = 100, shuffle_buffer=1000)

minMae = (temp.max() - temp.min())*10/100
minMae

class my_callback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('mae') < minMae):
            print("MAE has reached below 10%")
            self.model.stop_training = True

callbacks = my_callback()

model = tf.keras.models.Sequential([
  tf.keras.layers.Bidirectional(LSTM(64, return_sequences=True)),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dropout(rate=0.1),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

model.compile(loss = tf.keras.losses.Huber(),
              optimizer = tf.keras.optimizers.SGD(learning_rate=1e-4, momentum=0.9),
              metrics = ["mae"])

history = model.fit(train_set, 
                    validation_data = val_test,
                    epochs=100,
                    callbacks = callbacks)

import matplotlib.pyplot as plt
plt.plot(history.history['mae'], color="red")
plt.plot(history.history['val_mae'], color="green")
plt.title('mae')
plt.ylabel('mae')
plt.legend(['train', 'test'], loc='lower right')
plt.show()

plt.plot(history.history['loss'], color="red")
plt.plot(history.history['val_loss'], color="black")
plt.title('Loss')
plt.ylabel('loss')
plt.legend(['train', 'test'], loc='lower left')
plt.show()

